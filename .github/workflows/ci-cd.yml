name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['5.6', '7.0', '7.1', '7.2', '7.3', '7.4', '8.0', '8.1', '8.2', '8.3']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, xml, ctype, json, curl
        coverage: xdebug

    - name: Validate composer.json
      run: composer validate

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-${{ matrix.php-version }}-
          ${{ runner.os }}-composer-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Run code style check
      run: composer lint

    - name: Run tests
      run: composer test

    - name: Run tests with coverage (PHP 8.1 only)
      if: matrix.php-version == '8.1'
      run: composer test:coverage -- --coverage-clover=coverage.xml

    - name: Upload coverage to Codecov (PHP 8.1 only)
      if: matrix.php-version == '8.1'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, json, curl

    - name: Install dependencies
      run: composer install --prefer-dist --no-dev --no-progress --no-interaction

    - name: Extract version from composer.json
      id: get_version
      run: |
        VERSION=$(php -r "echo json_decode(file_get_contents('composer.json'))->version;")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Check if tag exists
      id: check_tag
      run: |
        if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      if: steps.check_tag.outputs.exists == 'false'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: Release v${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
        body: |
          ## What's Changed
          
          Auto-generated release for version ${{ steps.get_version.outputs.version }}
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.get_version.outputs.version }}...HEAD

  packagist:
    name: Update Packagist
    runs-on: ubuntu-latest
    needs: [test, release]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Trigger Packagist Update
      run: |
        curl -X POST \
          -H "Content-Type: application/json" \
          -d '{"repository":{"url":"https://github.com/${{ github.repository }}"}}' \
          "https://packagist.org/api/update-package?username=${{ secrets.PACKAGIST_USERNAME }}&apiToken=${{ secrets.PACKAGIST_TOKEN }}"